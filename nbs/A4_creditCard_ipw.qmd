---
title: "Reponderación de muestras"
subtitle: "Estimación de efectos causales por IPW"
format: 
  html:
    embed-resources: true
    toc: true
    toc_float: yes
    theme: cosmo
editor: source
execute: 
  warning: false
lang: es
---

## Definición del problema

Carga de datos y librerías:

```{r}
library(MatchIt)
library(cobalt)

source("https://juandmontoro.github.io/icml/nbs/procesar.R")

```

Descripción de las variables: 

1. `limite_bal`: límite tarjeta. 
2. `género`: género (1 = hombre; 2 = mujer). 
3. `edu`: nivel de educación (1 = graduate school; 2 = university; 3 = high school; 4 = others).  
4. `ecivil`: estado civil (1 = married; 2 = single; 3 = others).  
5. `edad`: edad.  
6. `importeAbril` importe liquidación en abril de 2005.  
7. `tratamiento`: impago mes de abril de 2005. 
8. `respuesta`: impago mes de septiembre de 2005.  
(Todos los importes monetarios en dólares NT.)

> Q:  ¿Como afecta el impago de la liquidación en Abril de 2005 (tratamiento) al impago en Septiembre de 2005 (respuesta)? 



A partir de las medias para tratados y no tratados podemos ver el grado de asociación entre tratamiento y respuesta:

```{r}
impago %>% 
  group_by(tratamiento) %>% 
  summarise(proporcion_impago_sept=mean(respuesta))
```

```{r echo=FALSE}
# definiciones de proporciones observadas en la muestra
# proporción impagos sept para tratados
p1 = round(mean(impago[impago$tratamiento==1,"respuesta"]),2)
# proprocion impagos sept para no tratados
p0 = round(mean(impago[impago$tratamiento==0,"respuesta"]),2)

```


Podemos estimar el efecto como la diferencia de riesgos (probabilidades) muestrales, si bien si existe confusión la estimación será sesgada. En el caso analizado la diferencia de riesgo es $dim =$ `r p1`- `r p0` = `r p1-p0`

## Reponderación de muestras: el IPW 

Recordemos que una vez estimado, el PS determina la probabilidad 
de tratamiento de cualquier unidad en la muestra. Hasta ahora se trataba de una 
métrica que utilizamos para determinar la proximidad (o parecido)
entre dos muestras u observaciones cualesquiera.

La reponderación de muestras usando IPW (inverse probability weighting) utiliza el
PS para determinar los pesos de las unidades de la muestra. De esta forma, en la estimación del ATE:

1. Sobreponderamos aquellas unidades  no tratadas no tratadas cuya probabilidad de tratamiento 
sea elevada (lo que las hace similares a las tratadas).
2. Igualmente sobreponderamos las unidades tratadas cuya probabilidad de tratamiento es baja
por ser parecidas (en variables de confusión) a las unidades no tratadas.

En el resto del documento procederemos a estimar el efecto causal usando IPW. Si 
bien no se incluye, en la estimación del ps se debe comprobar que existe equilibrio en variables 
de confusión.

## Estimación del PS y reponderación

Podemos seguir el siguiente flujo de trabajo:

1. Estimar un modelo para el puntaje de propensión
2. Predecir el PS para cada unidad
3. Usar IPW para ponderar cada unidad
4. Utilizar un modelo paramétrico o no paramétrico para estimar el efecto causal con la
muestra reponderada.

Veamos:

```{r}
# estimación
modeloPS <- glm(tratamiento ~ (.-respuesta), 
                family=binomial(link="logit"), 
                data=impago) 

# predicción
impagoIPW <- impago %>% 
  mutate(ps=predict(modeloPS,type="response"))

# Recortamos al soporte común para los tratados
minps <- impagoIPW %>%
    filter(tratamiento == 1) %>%
    pull(ps) %>%
    min(na.rm = TRUE)

maxps <- impagoIPW %>%
    filter(tratamiento == 1) %>%
    pull(ps) %>%
    max(na.rm = TRUE)
impagoIPW <- impagoIPW %>%
    filter(ps >= minps & ps <= maxps)

# Reponderar (para ATT)
impagoIPW <- impagoIPW %>% 
  mutate(ipwATT = case_when(
    tratamiento == 1 ~ 1,
    tratamiento == 0 ~ ps/(1-ps)))

# estimación modelo paramétrico

modeloY <- lm(respuesta~tratamiento, 
              data=impagoIPW,
              weights = ipwATT)

# Obtenemos el CI
confint(modeloY)
```

Un problema que puede surgir es la existencia de unidades con probabilidad 
de tratamiento elevadas que tengan una gran influencia en las estimaciones. 

```{r}
impagoIPW$ipwATT %>% summary()
```

Como vemos no es el caso en este conjunto de datos y para esta estimación del 
PS. No obstante si se diera la situación deberíamos recortar la muestra 
adicionalmente.

## Remuestreo para obtención de errores estándar

> Un detalle importante a tener en cuenta es que, aunque el efecto del tratamiento es fácil de estimar, estimar los errores estándar de ese efecto no será tan sencillo. Calcular el error estándar de una media ponderada es fácil. Pero el error estándar calculado no recordará que los pesos han sido estimados y, quizás, que algunas observaciones se han descartado en el proceso de emparejamiento. El paso de preprocesar los datos para emparejar observaciones y crear pesos introduce cierta incertidumbre y, por lo tanto, aumenta los errores estándar. Incorporar esta incertidumbre en los errores estándar es importante. (Huntington-Klein 2021)

Vamos a estimar el efecto y los errores estándar usando bootstrapping. Creamos para ello una función `ajuste_ipw` que incorporará todo el proceso para un remuestreo de la muestra original.
En concreto:

1. Estimará un modelo para PS del tratamiento (en este caso GLM pero 
podemos incluir cualquier modelo ML)
2. Generará predicciones
3. Recortará las muestras para incluir el soporte común entre tratados y no tratados
4. Generará las ponderaciones
5. Devolverá la diferencia de medias ponderadas entre los dos grupos

```{r}
# Funcion para estimación con IPW y ajuste por regresión

ajuste_ipw <- function(datos, index = 1:nrow(datos)) {
  # Applicamos el índice de bootstrap
  datos <- datos %>% slice(index)
  
  # Estimación y predicción del PS
  vars <- setdiff(names(impago), c("respuesta","tratamiento"))  
  rhs <- paste0("(", paste(vars, collapse = " + "), ")") 
  fml <- as.formula(paste("tratamiento ~ ", rhs))   
  
  m <- lm(fml,data=datos)
  datos <- datos %>%
    mutate(ps = predict(m,type="response"))
  
  # Recortamos obs de control fuera del rango de PS para tratados
  minps <- datos %>%
    filter(tratamiento == 1) %>%
    pull(ps) %>%
    min(na.rm = TRUE)
  maxps <- datos %>%
    filter(tratamiento == 1) %>%
    pull(ps) %>%
    max(na.rm = TRUE)
  datos <- datos %>%
    filter(ps >= minps & ps <= maxps)
  
  # Además recortamos observaciones influyentes
  # para ATT
  datos <- datos %>% filter(ps<=0.95)
  # para ATE
  # datos <- datos %>% filter(ps>=0.05 & ps<=0.95)
  
  # Creamos pesos IPW (ATT)
  datos <- datos %>%
    mutate(ipw = case_when(
      tratamiento == 1 ~ 1,
      tratamiento == 0 ~ ps/(1-ps)))
  
  # Estimación de la diferencia
  w_means <- datos %>% 
    group_by(tratamiento) %>%
    summarize(m = weighted.mean(respuesta, w = ipw)) %>%
    arrange(tratamiento)
  
  return(w_means$m[2] - w_means$m[1])
}
```

La función estima la diferencia de medias ajustada por IPW:

```{r}
ajuste_ipw(impago)
```

Cargamos la librería `boot` y pasamos la función anterior para remuestreo:

```{r}
library(boot)
b <- boot(impago, ajuste_ipw, R = 200) # R debería ser más elevado; solo como ejemplo
```

Veamos el resultado

```{r}
boot.ci(b,type="perc") # la opción type="bca" devuelve error por bajo número de réplicas
```

## Vuestro turno

Modificar el código anterior para estimar el ATE. 


